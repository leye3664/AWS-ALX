Great, let's proceed with the first part of Module 10: Automating Infrastructure Deployment. Here's a concise step-by-step guide:

### Module 10 - Challenge Lab: Automating Infrastructure Deployment

#### Scenario
- Automate café's deployments and replicate them to another AWS Region.
- Separate development and production environments with matching configurations.

#### Lab Overview and Objectives
- Create AWS CloudFormation templates.
- Use AWS CodeCommit for version control.
- Use AWS CodePipeline to automate stack updates.
- Duplicate network and application resources to another AWS Region.

#### Duration
- Approximately 90 minutes.

### Task 1: Creating an AWS CloudFormation Template from Scratch

1. **Access AWS Management Console**
    - Start the lab and wait until the status is "Lab status: ready".
    - Open AWS Management Console from the lab instructions page.

2. **Create CloudFormation Template**
    - Navigate to AWS Cloud9 and open the IDE.
    - Create a new file named `S3.yaml` in the IDE.
    - Add the following lines to the file:
      ```yaml
      AWSTemplateFormatVersion: "2010-09-09"
      Description: "cafe S3 template"
      Resources:
        S3Bucket:
          Type: AWS::S3::Bucket
      ```
    - Save the file.

3. **Create CloudFormation Stack**
    - In the Cloud9 terminal, run:
      ```bash
      aws configure get region
      aws cloudformation create-stack --stack-name CreateBucket --template-body file://S3.yaml
      ```
    - Verify the stack creation in AWS CloudFormation console and Amazon S3 console.

4. **Answer Questions**
    - Submit answers to the provided questions in the lab instructions.

### Task 2: Configuring the Bucket as a Website and Updating the Stack

1. **Set Bucket Controls and Upload Assets**
    - Run the following commands in the Cloud9 terminal (replace `<BUCKET-NAME>` with your actual bucket name):
      ```bash
      wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2-91555/14-lab-mod10-challenge-CFn/s3/static-website.zip
      unzip static-website.zip -d static
      cd static
      aws s3api put-bucket-ownership-controls --bucket <BUCKET-NAME> --ownership-controls Rules=[{ObjectOwnership=BucketOwnerPreferred}]
      aws s3api put-public-access-block --bucket <BUCKET-NAME> --public-access-block-configuration "BlockPublicAcls=false,RestrictPublicBuckets=false,IgnorePublicAcls=false,BlockPublicPolicy=false"
      aws s3 cp --recursive . s3://<BUCKET-NAME>/ --acl public-read
      ```

2. **Update CloudFormation Template**
    - Refer to AWS CloudFormation documentation for `AWS::S3::Bucket`.
    - Modify `S3.yaml` to include:
      ```yaml
      DeletionPolicy: Retain
      WebsiteConfiguration:
        IndexDocument: index.html
      ```
    - Add an output for the website URL:
      ```yaml
      Outputs:
        WebsiteURL:
          Value: !GetAtt S3Bucket.WebsiteURL
          Description: URL for website hosted on S3
      ```

3. **Validate and Update Stack**
    - Validate template:
      ```bash
      cd ../
      aws cloudformation validate-template --template-body file://S3.yaml
      ```
    - Update stack:
      ```bash
      aws cloudformation update-stack --stack-name CreateBucket --template-body file://S3.yaml
      ```
    - Verify the stack update and check the website URL in the Outputs tab.

### Task 3: Cloning a CodeCommit Repository

1. **Clone CodeCommit Repository**
    - Browse to CodeCommit service and find `CFTemplatesRepo`.
    - Copy the HTTPS clone URL.
    - In Cloud9 terminal, run:
      ```bash
      git clone <url>
      cd CFTemplatesRepo
      git status
      ```

### Task 4: Creating a New Network Layer with AWS CloudFormation, CodeCommit, and CodePipeline

1. **Create Network Layer Template**
    - Duplicate `template1.yaml` and rename it to `cafe-network.yaml`.
    - Set the description to: "Network layer for the cafe".
    - Save the file.

2. **Trigger CodePipeline**
    - Push the changes to CodeCommit:
      ```bash
      git add templates/cafe-network.yaml
      git commit -m 'initial commit of network template' templates/cafe-network.yaml
      git push
      ```
    - Verify the pipeline run and stack creation in CodePipeline console.

### Task 5: Updating the Network Stack

1. **Add Outputs to Network Template**
    - Add the following lines to the bottom of `cafe-network.yaml`:
      ```yaml
      Outputs:
        PublicSubnet:
          Description: The subnet ID to use for public web servers
          Value: !Ref PublicSubnet
          Export:
            Name: !Sub '${AWS::StackName}-SubnetID'
        VpcId:
          Description: The VPC ID
          Value: !Ref VPC
          Export:
            Name: !Sub '${AWS::StackName}-VpcID'
      ```
    - Save, commit, and push the changes to CodeCommit:
      ```bash
      git add templates/cafe-network.yaml
      git commit -m 'add outputs to network template' templates/cafe-network.yaml
      git push
      ```

2. **Verify Stack Update**
    - Confirm the stack update and check the Outputs tab for the new keys.

Let's break down the tasks to be done in this lab and create the necessary CloudFormation template:

### Task 6: Defining an EC2 Instance Resource and Creating the Application Stack

#### 40. Duplicate the `template2.yaml` file and rename it as `cafe-app.yaml`:

```bash
cd /home/ec2-user/environment/CFTemplatesRepo/templates
cp template2.yaml cafe-app.yaml
```

#### 41. Analyze the existing template contents:

The `cafe-app.yaml` should already have sections for Parameters, Mappings, Resources, and Outputs.

#### 42. Define a third parameter for choosing instance types:

Add the following parameter to the Parameters section of `cafe-app.yaml`:

```yaml
Parameters:
  ...
  InstanceTypeParameter:
    Type: String
    Description: "Select the instance type for the EC2 instance"
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
```

#### 43. Open AWS Documentation for reference:

This is just a reminder to consult AWS documentation as needed.

#### 44. Create a new EC2 instance resource:

Add the following resource to the Resources section of `cafe-app.yaml`:

```yaml
Resources:
  ...
  CafeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !FindInMap [RegionMap, !Ref "AWS::Region", keypair]
      IamInstanceProfile: CafeRole
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !ImportValue
            'Fn::Sub': '${CafeNetworkParameter}-SubnetID'
          GroupSet:
            - !Ref CafeSG
      Tags:
        - Key: Name
          Value: Cafe Web Server
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum -y update
            yum install -y httpd mariadb-server wget
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            systemctl enable httpd
            systemctl start httpd
            systemctl enable mariadb
            systemctl start mariadb
            wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2-91555/14-lab-mod10-challenge-CFn/s3/cafe-app.sh
            chmod +x cafe-app.sh
            ./cafe-app.sh
```

#### 45. Validate the template format:

```bash
aws cloudformation validate-template --template-body file:///home/ec2-user/environment/CFTemplatesRepo/templates/cafe-app.yaml
```

#### 46. Add the file to CodeCommit:

```bash
cd /home/ec2-user/environment/CFTemplatesRepo
git add templates/cafe-app.yaml
git commit -m "Added cafe-app.yaml for application stack"
git push
```

#### 47. Confirm pipeline execution:

Monitor the `CafeAppPipeline` in the AWS CodePipeline console to ensure the pipeline runs successfully.

#### 48. Confirm stack creation:

In the AWS CloudFormation console, ensure the `update-cafe-app` stack shows a status of `CREATE_COMPLETE`.

#### 49. Confirm EC2 instance creation:

In the Amazon EC2 console, verify that the instance and security group were created.

#### 50. Test the café website:

Once the instance is running, test the website:

```http
http://<public-ip-address>/cafe
```

#### 51. Answer multiple-choice questions:

- **Question 4:** Check the Parameters tab of the `update-cafe-app` stack for the value of `LatestAmiId`.
- **Question 5:** Check the Stack info tab for the ARN of the IAM role.
- **Question 6:** Observe the commit details in the CodeCommit repository.

---

### Task 7: Duplicating the Café Network and Website to Another AWS Region

#### 52. Duplicate the café network:

```bash
aws cloudformation create-stack --stack-name update-cafe-network --template-body file:///home/ec2-user/environment/CFTemplatesRepo/templates/cafe-network.yaml --region us-west-2
```

#### 53. Confirm stack creation in us-west-2:

In the AWS CloudFormation console, change the Region to `us-west-2` and verify the stack.

#### 54. Confirm network resources:

In the Amazon VPC console, verify the network resources in `us-west-2`.

#### 55. Create an EC2 key pair in us-west-2:

```bash
aws ec2 create-key-pair --key-name cafe-oregon --region us-west-2
```

#### 56. Observe the `cafe-app.yaml` details:

Review the `KeyName` property and `InstanceTypeParameter` in the template.

#### 57. Copy the template file to S3:

```bash
aws s3 cp templates/cafe-app.yaml s3://<repobucket-bucketname>/
```

#### 58. Copy the S3 Object URL:

Get the Object URL from the Amazon S3 console.

#### 59. Change Region to us-west-2:

In the AWS CloudFormation console, switch to `us-west-2`.

#### 60. Create a stack with the new resources:

Create a new stack using the S3 URL:

```yaml
Stack name: update-cafe-app
InstanceTypeParameter: t3.micro
```

Verify that the stack creation is successful.

#### 61. Verify EC2 instance creation in us-west-2:

Check the Amazon EC2 console for the instance and ensure the website is accessible:

```http
http://<public-ip-address>/cafe
```

---

By following these detailed steps, you will complete the lab and achieve the goals of deploying the café website infrastructure and application across multiple AWS Regions using CloudFormation templates.
